#!/bin/bash

# Copyright 2014--2015 Jan Pazdziora
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -xe

function usage () {
	if [ -n "$1" ] ; then
		echo $1 >&2
	else
		echo "Start as docker run -e PASSWORD=\$THE_ADMIN_PASSWORD image" >&2
		echo "    with -h <the-FQDN-hostname> and possibly --link <FreeIPA-container>:ipa" >&2
	fi
	exit 1
}

function stop_running () {
	systemctl stop-running
}
trap stop_running TERM


DATA_TEMPLATE=/data-template
DATA=/data
# Set up data dir
(
	cd $DATA
	grep '/$' /etc/volume-data-list | sed 's!^!.!' | xargs --no-run-if-empty mkdir -p 
)

# Copy data files over, but don't replace
if ! [ -f /etc/ipa/ca.crt ] ; then
        ( cd $DATA_TEMPLATE && tar cf - . ) | ( cd $DATA && tar xfk - ) || :
fi

# Set up ssh host keys
for key in rsa dsa ecdsa; do
  path="/etc/ssh/ssh_host_${key}_key"
  if ! [ -e "$path" ];then
    ssh-keygen -N "" -t $key -f $path
  fi
done

systemd-machine-id-setup

systemctl enable sshd.service
systemctl enable dbus.service
systemctl enable systemd-journald.socket
systemctl enable systemd-journald.service
systemctl enable syslog.socket
#systemctl enable rsyslog.service


rm -rf /var/run/*.pid
rm -f /run/systemctl-lite-running/*

# Not desired for kubernetes deployment
#if [ -n "$IPA_PORT_53_UDP_ADDR" ] ; then
#	echo "nameserver $IPA_PORT_53_UDP_ADDR" > /etc/resolv.conf
#fi

EXPECTED_VARS="IPA_PORT_80_TCP_ADDR CLUSTER_DOMAIN IPA_CLIENT_INSTALL_OPTS"
IPA_JOIN_USER=${IPA_JOIN_USER:-admin}

for var in $EXPECTED_VARS; do
	if [ -z "${!var}" ]; then
		echo "$var is not set. Cannot continue."
		exit 1
	fi
done
if [ -f /etc/ipa/ca.crt ] ; then
	HOSTNAME_IPA=$(cat /etc/hostname.ipa-client)
	if [ ! "$HOSTNAME_IPA" == "$(hostname -f)" ] ; then
		if hostname $HOSTNAME_IPA ; then
			echo "Hostname set to $HOSTNAME_IPA"
		else
			echo "The container hostname is $(hostname -f) and cannot set $HOSTNAME_IPA; run with -h." >&2
			#exit 1
		fi
	fi
	echo "System is already FreeIPA-enrolled, starting the services."
	systemctl start-enabled
	echo "System is ready."
else
	if [ -z "$PASSWORD" ] ; then
		usage
	fi

	if [ "$(hostname -f)" == "$(hostname -s)" ] ; then
		if [ -z "$IPA_PORT_80_TCP_ADDR" ] ; then
			echo "Hostname [$(hostname -f)] is not FQDN and no --link to IPA server specified." >&2
			#exit 2
		else
                        if ! echo "$IPA_CLIENT_INSTALL_OPTS" | grep -q -- "--hostname"; then
				IPA=$( curl -si http://$IPA_PORT_80_TCP_ADDR/ | perl -lne 'm!^Location:\shttps?://(.+?)/! and print $1' )
				DOMAIN=${IPA#*.}
				HOSTNAME_FQDN=$( hostname ).$DOMAIN
				HOSTNAME_OPTS=--hostname=$HOSTNAME_FQDN                       
				if ! hostname $HOSTNAME_FQDN ; then
					echo "Failed to set hostname to [$HOSTNAME_FQDN]" >&2
					#exit 1
				fi
			else
				IPA="$IPA_PORT_80_TCP_ADDR"
				DOMAIN=${CLUSTER_DOMAIN}
				
			fi
		fi
	fi
	echo "Test ldap first"
	CLUSTER_USER_DN=$(echo $CLUSTER_DOMAIN | awk  '{printf "dc=";gsub(/\./,",dc=",$0);printf $0}')
	ldapsearch -x -h $IPA -b $CLUSTER_USER_DN uid=admin
	echo "Enroll in FreeIPA."
	/usr/sbin/ipa-client-install $IPA_CLIENT_INSTALL_OPTS $HOSTNAME_OPTS -p "$IPA_JOIN_USER" -w "$PASSWORD" -U --enable-dns-updates --mkhomedir --force-join --force --no-ntp < /dev/null
	cp -f /etc/hostname /etc/hostname.ipa-client
	echo "FreeIPA-enrolled."
	systemctl disable rhel-domainname.service
	echo "Starting services after FreeIPA enrollment."
	systemctl start-enabled
	# rsyslog startup workaround
	systemctl stop rsyslog
	killall rsyslogd
	sleep 3
	systemctl start rsyslog
	echo "started"
fi

# Set domain for all users
cat << EOF > /etc/profile.d/domain.sh
export DOMAINNAME=$DOMAIN
EOF

if [ -z "$1" -o "$1" != "-s" ] ; then
	if [ -t 0 ] ; then
		echo 'Starting interactive shell.'
		/bin/bash
	else
		echo 'Tailing system logs.'
		tail --silent -n 0 -f --retry /var/log/sssd/*.log /var/log/systemctl.log 2> /dev/null < /dev/null
	fi
fi
